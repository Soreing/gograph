// Code generated by fastjson for scanning JSON strings. DO NOT EDIT.
package resource

import (
    reader "github.com/Soreing/fastjson/reader"
)

func (o *MediaInfo)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "resourceId":
                        o.ResourceId, err = r.GetString()
                    case "uri":
                        o.Uri, err = r.GetString()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *MediaInfo)sequenceFastJSON(r *reader.Reader, idx int) (res []MediaInfo, err error) {
    var e MediaInfo
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]MediaInfo, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *MediaInfo) UnmarshalFastJSONSlice(r *reader.Reader) (res []MediaInfo, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *ParticipantInfo)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "countryCode":
                        o.CountryCode, err = r.GetString()
                    case "endpointType":
                        o.EndpointType, err = r.GetString()
                    case "identity":
                        o.Identity = &IdentitySet{}
                        err = o.Identity.UnmarshalFastJSON(r)
                    case "languageId":
                        o.LanguageId, err = r.GetString()
                    case "participantId":
                        o.ParticipantId, err = r.GetString()
                    case "region":
                        o.Region, err = r.GetString()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *ParticipantInfo)sequenceFastJSON(r *reader.Reader, idx int) (res []ParticipantInfo, err error) {
    var e ParticipantInfo
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]ParticipantInfo, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *ParticipantInfo) UnmarshalFastJSONSlice(r *reader.Reader) (res []ParticipantInfo, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *Call)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "callbackUri":
                        o.CallbackUri, err = r.GetString()
                    case "callChainId":
                        o.CallChainId, err = r.GetString()
                    case "callOptions":
                        o.CallOptions = &OutgoingCallOptions{}
                        err = o.CallOptions.UnmarshalFastJSON(r)
                    case "callRoutes":
                        o.CallRoutes, err = (*CallRoute)(nil).UnmarshalFastJSONSlice(r)
                    case "chatInfo":
                        o.ChatInfo = &ChatInfo{}
                        err = o.ChatInfo.UnmarshalFastJSON(r)
                    case "direction":
                        o.Direction, err = r.GetString()
                    case "id":
                        o.Id, err = r.GetString()
                    case "incomingContext":
                        o.IncomingContext = &IncomingContext{}
                        err = o.IncomingContext.UnmarshalFastJSON(r)
                    case "mediaConfig":
                        o.MediaConfig = &AnyResource{}
                        err = o.MediaConfig.UnmarshalFastJSON(r)
                    case "mediaState":
                        o.MediaState, err = r.GetString()
                    case "meetingInfo":
                        o.MeetingInfo = &AnyResource{}
                        err = o.MeetingInfo.UnmarshalFastJSON(r)
                    case "myParticipantId":
                        o.MyParticipantId, err = r.GetString()
                    case "requestedModalities":
                        o.RequestedModalities, err = r.GetStrings()
                    case "resultInfo":
                        o.ResultInfo = &ResultInfo{}
                        err = o.ResultInfo.UnmarshalFastJSON(r)
                    case "source":
                        o.Source = &ParticipantInfo{}
                        err = o.Source.UnmarshalFastJSON(r)
                    case "state":
                        o.State, err = r.GetString()
                    case "subject":
                        o.Subject, err = r.GetString()
                    case "targets":
                        o.Targets, err = (*ParticipantInfo)(nil).UnmarshalFastJSONSlice(r)
                    case "toneInfo":
                        o.ToneInfo = &ToneInfo{}
                        err = o.ToneInfo.UnmarshalFastJSON(r)
                    case "transcription":
                        o.Transcription = &CallTranscriptionInfo{}
                        err = o.Transcription.UnmarshalFastJSON(r)
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *Call)sequenceFastJSON(r *reader.Reader, idx int) (res []Call, err error) {
    var e Call
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]Call, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *Call) UnmarshalFastJSONSlice(r *reader.Reader) (res []Call, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *CommsNotification)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "changeType":
                        o.ChangeType, err = r.GetString()
                    case "resourceUrl":
                        o.ResourceUrl, err = r.GetString()
                    case "resourceData":
                        o.ResourceData = &AnyResource{}
                        err = o.ResourceData.UnmarshalFastJSON(r)
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *CommsNotification)sequenceFastJSON(r *reader.Reader, idx int) (res []CommsNotification, err error) {
    var e CommsNotification
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]CommsNotification, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *CommsNotification) UnmarshalFastJSONSlice(r *reader.Reader) (res []CommsNotification, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *CommsNotifications)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "value":
                        o.Value, err = (*CommsNotification)(nil).UnmarshalFastJSONSlice(r)
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *CommsNotifications)sequenceFastJSON(r *reader.Reader, idx int) (res []CommsNotifications, err error) {
    var e CommsNotifications
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]CommsNotifications, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *CommsNotifications) UnmarshalFastJSONSlice(r *reader.Reader) (res []CommsNotifications, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *Identity)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "acsResourceId":
                        o.AcsResourceId, err = r.GetString()
                    case "displayName":
                        o.DisplayName, err = r.GetString()
                    case "id":
                        o.Id, err = r.GetString()
                    case "identityProvider":
                        o.IdentityProvider, err = r.GetString()
                    case "tenantId":
                        o.TenantId, err = r.GetString()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *Identity)sequenceFastJSON(r *reader.Reader, idx int) (res []Identity, err error) {
    var e Identity
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]Identity, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *Identity) UnmarshalFastJSONSlice(r *reader.Reader) (res []Identity, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *IdentitySet)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "acsUser":
                        o.AcsUser = &Identity{}
                        err = o.AcsUser.UnmarshalFastJSON(r)
                    case "application":
                        o.Application = &Identity{}
                        err = o.Application.UnmarshalFastJSON(r)
                    case "phone":
                        o.Phone = &Identity{}
                        err = o.Phone.UnmarshalFastJSON(r)
                    case "user":
                        o.User = &Identity{}
                        err = o.User.UnmarshalFastJSON(r)
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *IdentitySet)sequenceFastJSON(r *reader.Reader, idx int) (res []IdentitySet, err error) {
    var e IdentitySet
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]IdentitySet, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *IdentitySet) UnmarshalFastJSONSlice(r *reader.Reader) (res []IdentitySet, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *IncomingContext)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "sourceParticipantId":
                        o.SourceParticipantId, err = r.GetString()
                    case "observedParticipantId":
                        o.ObservedParticipantId, err = r.GetString()
                    case "onBehalfOf":
                        o.OnBehalfOf = &IdentitySet{}
                        err = o.OnBehalfOf.UnmarshalFastJSON(r)
                    case "transferor":
                        o.Transferor = &IdentitySet{}
                        err = o.Transferor.UnmarshalFastJSON(r)
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *IncomingContext)sequenceFastJSON(r *reader.Reader, idx int) (res []IncomingContext, err error) {
    var e IncomingContext
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]IncomingContext, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *IncomingContext) UnmarshalFastJSONSlice(r *reader.Reader) (res []IncomingContext, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *TokenMeetingInfo)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "token":
                        o.Token, err = r.GetString()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *TokenMeetingInfo)sequenceFastJSON(r *reader.Reader, idx int) (res []TokenMeetingInfo, err error) {
    var e TokenMeetingInfo
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]TokenMeetingInfo, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *TokenMeetingInfo) UnmarshalFastJSONSlice(r *reader.Reader) (res []TokenMeetingInfo, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *CallTranscriptionInfo)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "lastModifiedDateTime":
                        o.LastModifiedDateTime, err = r.GetTime()
                    case "state":
                        o.State, err = r.GetString()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *CallTranscriptionInfo)sequenceFastJSON(r *reader.Reader, idx int) (res []CallTranscriptionInfo, err error) {
    var e CallTranscriptionInfo
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]CallTranscriptionInfo, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *CallTranscriptionInfo) UnmarshalFastJSONSlice(r *reader.Reader) (res []CallTranscriptionInfo, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *Participant)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "id":
                        o.Id, err = r.GetString()
                    case "info":
                        o.Info = &ParticipantInfo{}
                        err = o.Info.UnmarshalFastJSON(r)
                    case "isInLobby":
                        o.IsInLobby, err = r.GetBoolean()
                    case "isMuted":
                        o.IsMuted, err = r.GetBoolean()
                    case "mediaStreams":
                        o.MediaStreams, err = (*MediaStream)(nil).UnmarshalFastJSONSlice(r)
                    case "metadata":
                        o.Metadata, err = r.GetString()
                    case "recordingInfo":
                        o.RecordingInfo = &RecordingInfo{}
                        err = o.RecordingInfo.UnmarshalFastJSON(r)
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *Participant)sequenceFastJSON(r *reader.Reader, idx int) (res []Participant, err error) {
    var e Participant
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]Participant, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *Participant) UnmarshalFastJSONSlice(r *reader.Reader) (res []Participant, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *ResultInfo)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "code":
                        o.Code, err = r.GetInt32()
                    case "message":
                        o.Message, err = r.GetString()
                    case "subcode":
                        o.Subcode, err = r.GetInt32()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *ResultInfo)sequenceFastJSON(r *reader.Reader, idx int) (res []ResultInfo, err error) {
    var e ResultInfo
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]ResultInfo, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *ResultInfo) UnmarshalFastJSONSlice(r *reader.Reader) (res []ResultInfo, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *ServiceHostedMediaConfig)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "preFetchMedia":
                        o.PreFetchMedia, err = (*MediaInfo)(nil).UnmarshalFastJSONSlice(r)
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *ServiceHostedMediaConfig)sequenceFastJSON(r *reader.Reader, idx int) (res []ServiceHostedMediaConfig, err error) {
    var e ServiceHostedMediaConfig
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]ServiceHostedMediaConfig, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *ServiceHostedMediaConfig) UnmarshalFastJSONSlice(r *reader.Reader) (res []ServiceHostedMediaConfig, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *ToneInfo)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "sequenceId":
                        o.SequenceId, err = r.GetInt64()
                    case "tone":
                        o.Tone, err = r.GetString()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *ToneInfo)sequenceFastJSON(r *reader.Reader, idx int) (res []ToneInfo, err error) {
    var e ToneInfo
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]ToneInfo, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *ToneInfo) UnmarshalFastJSONSlice(r *reader.Reader) (res []ToneInfo, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *CallRoute)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {

                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *CallRoute)sequenceFastJSON(r *reader.Reader, idx int) (res []CallRoute, err error) {
    var e CallRoute
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]CallRoute, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *CallRoute) UnmarshalFastJSONSlice(r *reader.Reader) (res []CallRoute, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *JoinMeetingIdMeetingInfo)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "joinMeetingId":
                        o.JoinMeetingId, err = r.GetString()
                    case "passcode":
                        o.Passcode, err = r.GetString()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *JoinMeetingIdMeetingInfo)sequenceFastJSON(r *reader.Reader, idx int) (res []JoinMeetingIdMeetingInfo, err error) {
    var e JoinMeetingIdMeetingInfo
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]JoinMeetingIdMeetingInfo, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *JoinMeetingIdMeetingInfo) UnmarshalFastJSONSlice(r *reader.Reader) (res []JoinMeetingIdMeetingInfo, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *MediaStream)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "direction":
                        o.Direction, err = r.GetString()
                    case "label":
                        o.Label, err = r.GetString()
                    case "mediaType":
                        o.MediaType, err = r.GetString()
                    case "serverMuted":
                        o.ServerMuted, err = r.GetBooleanPtr()
                    case "sourceId":
                        o.SourceId, err = r.GetString()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *MediaStream)sequenceFastJSON(r *reader.Reader, idx int) (res []MediaStream, err error) {
    var e MediaStream
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]MediaStream, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *MediaStream) UnmarshalFastJSONSlice(r *reader.Reader) (res []MediaStream, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *OrganizerMeetingInfo)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "organizer":
                        o.Organizer = &IdentitySet{}
                        err = o.Organizer.UnmarshalFastJSON(r)
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *OrganizerMeetingInfo)sequenceFastJSON(r *reader.Reader, idx int) (res []OrganizerMeetingInfo, err error) {
    var e OrganizerMeetingInfo
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]OrganizerMeetingInfo, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *OrganizerMeetingInfo) UnmarshalFastJSONSlice(r *reader.Reader) (res []OrganizerMeetingInfo, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *OutgoingCallOptions)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "hideBotAfterEscalation":
                        o.HideBotAfterEscalation, err = r.GetBooleanPtr()
                    case "isContentSharingNotificationEnabled":
                        o.IsContentSharingNotificationEnabled, err = r.GetBooleanPtr()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *OutgoingCallOptions)sequenceFastJSON(r *reader.Reader, idx int) (res []OutgoingCallOptions, err error) {
    var e OutgoingCallOptions
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]OutgoingCallOptions, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *OutgoingCallOptions) UnmarshalFastJSONSlice(r *reader.Reader) (res []OutgoingCallOptions, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *RecordingInfo)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "initiator":
                        o.Initiator = &IdentitySet{}
                        err = o.Initiator.UnmarshalFastJSON(r)
                    case "recordingStatus":
                        o.RecordingStatus, err = r.GetString()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *RecordingInfo)sequenceFastJSON(r *reader.Reader, idx int) (res []RecordingInfo, err error) {
    var e RecordingInfo
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]RecordingInfo, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *RecordingInfo) UnmarshalFastJSONSlice(r *reader.Reader) (res []RecordingInfo, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *AppHostedMediaConfig)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "blob":
                        o.Blob, err = r.GetString()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *AppHostedMediaConfig)sequenceFastJSON(r *reader.Reader, idx int) (res []AppHostedMediaConfig, err error) {
    var e AppHostedMediaConfig
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]AppHostedMediaConfig, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *AppHostedMediaConfig) UnmarshalFastJSONSlice(r *reader.Reader) (res []AppHostedMediaConfig, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *ChatInfo)UnmarshalFastJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "@odata.type":
                        o.ODataType, err = r.GetString()
                    case "messageId":
                        o.MessageId, err = r.GetString()
                    case "replyChainMessageId":
                        o.ReplyChainMessageId, err = r.GetString()
                    case "threadId":
                        o.ThreadId, err = r.GetString()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *ChatInfo)sequenceFastJSON(r *reader.Reader, idx int) (res []ChatInfo, err error) {
    var e ChatInfo
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]ChatInfo, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *ChatInfo) UnmarshalFastJSONSlice(r *reader.Reader) (res []ChatInfo, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *ResourceType)UnmarshalFastJSON(r *reader.Reader) (err error) {
    *(*int)(o), err = r.GetInt()
    return
}

func (o *ResourceType)sequenceFastJSON(r *reader.Reader, idx int) (res []ResourceType, err error) {
    var e ResourceType
    if err = e.UnmarshalFastJSON(r); err == nil {
        if !r.Next() {
            res = make([]ResourceType, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceFastJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *ResourceType) UnmarshalFastJSONSlice(r *reader.Reader) (res []ResourceType, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceFastJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

